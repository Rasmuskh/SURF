//=============================================================================
//
// file :        CornerStone130.h
//
// description : Include for the CornerStone130 class.
//
// project :	Corner stone 130
//
// $Author: pascal_verdier $
//
// $Revision: 13293 $
// $Date: 2009-04-07 12:53:56 +0200 (Tue, 07 Apr 2009) $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source$
// $Log$
// Revision 3.5  2007/10/23 14:04:30  pascal_verdier
// Spelling mistakes correction
//
// Revision 3.4  2005/03/02 14:06:15  pascal_verdier
// namespace is different than class name.
//
// Revision 3.3  2004/10/25 14:12:00  pascal_verdier
// Minor changes.
//
// Revision 3.2  2004/09/06 09:27:05  pascal_verdier
// Modified for Tango 5 compatibility.
//
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _CORNERSTONE130_H
#define _CORNERSTONE130_H

#include <tango.h>
#include "HardwareInterface.h"
#include "TypesAndConsts.h"
//using namespace Tango;

/**
 * @author	$Author: pascal_verdier $
 * @version	$Revision: 13293 $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------


namespace CornerStone130_ns
{

/**
 * Class Description:
 * This class is to interface the  CornerStone130 equipment on TANGO
 */

/*
 *	Device States Description:
*  Tango::INIT :     Initialization in progress...
*  Tango::STANDBY :  Device is up and ready.
*  Tango::MOVING :   Monochromator central wavelength is moving.
*  Tango::FAULT :    Fatal error occurred.
 */


class CornerStone130: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
  /*
		Tango::DevUShort	*attr_gratingNumber_read;
		Tango::DevUShort	attr_gratingNumber_write;
		Tango::DevString	*attr_gratingLabel_read;
		Tango::DevDouble	*attr_gratingMinWL_read;
		Tango::DevDouble	*attr_gratingMaxWL_read;
		Tango::DevUShort	*attr_filterNumber_read;
		Tango::DevUShort	attr_filterNumber_write;
		Tango::DevString	*attr_filterLabel_read;
		Tango::DevDouble	*attr_wavelength_read;
		Tango::DevDouble	attr_wavelength_write;
		Tango::DevBoolean	*attr_shutterClosed_read;
		Tango::DevBoolean	attr_shutterClosed_write;*/
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	List of {grating id : grating label : min wavelength : max wavelength}
 */
	vector<string>	gratings;
/**
 *	List of {filter id : filter label}
 */
	vector<string>	filters;
/**
 *	Operational unit, among: nm, um, wm.
 */
	string	operationalUnit;
/**
 *	GPIB device name.
 */
	string	gpibDeviceUrl;
/**
 *	Polling period, in ms.
 */
	Tango::DevDouble	pollingPeriod;
/**
 *	Read command delay, in ms. For expert only.
 */
	Tango::DevDouble	readDelay;
/**
 *	Filter write delay, in ms.
 */
	Tango::DevDouble	filterWriteDelay;
/**
 *	Grating write delay, in ms.
 */
	Tango::DevDouble	gratingWriteDelay;
/**
 *	Wavelength write delay, in ms.
 */
	Tango::DevDouble	waveLengthWriteDelay;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	CornerStone130(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	CornerStone130(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	CornerStone130(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~CornerStone130() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name CornerStone130 methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for gratingNumber acquisition result.
 */
	virtual void read_gratingNumber(Tango::Attribute &attr);
/**
 *	Write gratingNumber attribute values to hardware.
 */
	virtual void write_gratingNumber(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gratingLabel acquisition result.
 */
	virtual void read_gratingLabel(Tango::Attribute &attr);
/**
 *	Extract real attribute values for gratingMinWL acquisition result.
 */
	virtual void read_gratingMinWL(Tango::Attribute &attr);
/**
 *	Extract real attribute values for gratingMaxWL acquisition result.
 */
	virtual void read_gratingMaxWL(Tango::Attribute &attr);
/**
 *	Extract real attribute values for filterNumber acquisition result.
 */
	virtual void read_filterNumber(Tango::Attribute &attr);
/**
 *	Write filterNumber attribute values to hardware.
 */
	virtual void write_filterNumber(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for filterLabel acquisition result.
 */
	virtual void read_filterLabel(Tango::Attribute &attr);
/**
 *	Extract real attribute values for wavelength acquisition result.
 */
	virtual void read_wavelength(Tango::Attribute &attr);
/**
 *	Write wavelength attribute values to hardware.
 */
	virtual void write_wavelength(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for shutterClosed acquisition result.
 */
	virtual void read_shutterClosed(Tango::Attribute &attr);
/**
 *	Write shutterClosed attribute values to hardware.
 */
	virtual void write_shutterClosed(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for gratingNumber attribute.
 */
	virtual bool is_gratingNumber_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gratingLabel attribute.
 */
	virtual bool is_gratingLabel_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gratingMinWL attribute.
 */
	virtual bool is_gratingMinWL_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gratingMaxWL attribute.
 */
	virtual bool is_gratingMaxWL_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for filterNumber attribute.
 */
	virtual bool is_filterNumber_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for filterLabel attribute.
 */
	virtual bool is_filterLabel_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for wavelength attribute.
 */
	virtual bool is_wavelength_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for shutterClosed attribute.
 */
	virtual bool is_shutterClosed_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Abort command.
 */
	virtual bool is_Abort_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * Stops monochromator.
 *	@exception DevFailed
 */
	void	abort();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
  
	//- hardware interface pointer
	HardwareInterface * m_hwInterface;
	
	//- device state and status
	Tango::DevState m_curr_state;
	std::string m_curr_status;
	
	// init done flag
	bool m_init_device_done;	
	
	//- Property parser
	//--------------------------
	void parse_gratings_prop() 
    throw(Tango::DevFailed);
	void parse_filters_prop() 
    throw(Tango::DevFailed);

  //- filter map
  Filters_t m_filters;

  //- grating map
  Gratings_t m_gratings;
};

}	// namespace_ns

#endif	// _CORNERSTONE130_H
